{
  "greeting": "Welcome!",
  "about": "About",
  "career": "Major Projects",
  "skills": "Tech Stack",
  "contact": "Contact",
  "typeText": "Hello!\nI'm Minseob Shim, a frontend developer.\nI graduated from high school and university in the US, and I'm currently based in Seoul.\nI mostly worked on React-TypeScript or React Native based projects.\nWorking on 10 projects in a year gave me a good understanding on various skills and third-party libraries.",
  "html5": "I understand the importance of web accessibility and semantic markup, and have experience structuring markup with semantic tags and alt attributes to enhance user experience and accessibility.",
  "css3": "Skilled in mobile-first responsive design using media queries and implementing CSS animations to create smooth user interactions, all without relying on external frameworks.",
  "javascript": "Built a portfolio website using only vanilla JavaScript, applying ES6 features effectively and demonstrating deep understanding of core concepts like DOM manipulation, event handling, and Flexbox layout.",
  "react": "I have a clear understanding of React’s rendering architecture and the rationale behind the introduction of Fiber. I can explain how component-based architecture has evolved and have experience using features like Suspense, Error Boundary, and Context API to enhance UX. I apply useReducer and useContext appropriately to improve code clarity and maintainability, and I quickly adapt to new syntax and updates in recent React versions.",
  "reactNative": "Experienced in building mobile apps using React Native, including conditional rendering tailored to platform-specific behavior and implementing BottomSheet UI. I’ve used three.js for WebGL-based 3D rendering in mobile apps and applied performance optimizations using FlatList and useCallback. Also familiar with styling by platform and designing with native elements like StatusBar and SafeAreaView.",
  "typescript": "I understand how the TypeScript compiler (tsc) works and am skilled in interface-based type design focused on scalability. I use union, tuple, and enum types appropriately to manage complex data structures and actively leverage TypeScript in production projects to improve stability and prevent runtime errors.",
  "nextJS": "While still improving my proficiency with Next.js, I’ve applied both SSR and CSR appropriately based on page requirements in real projects. I’ve used parallel routing with the App Router for flexible page composition, and have experience handling large datasets using Relay in a GraphQL environment. I’m expanding my Next.js skills through continued practical application.",
  "zustand": "I understand the lightweight state management structure of Zustand and its hook-based store pattern. I’ve used it to build global state without boilerplate code, allowing quick prototyping and efficient state sharing across components. I maintain strong type safety by combining Zustand with TypeScript.",
  "mobx": "I understand MobX’s observer pattern and have experience building reactive UIs using decorators like @observable, @action, and @computed. I can explain how automatic re-rendering works based on state changes and manage complex component dependencies in a clean and concise way.",
  "redux": "Familiar with Redux’s predictable state flow and structured design, and can clearly explain the data flow from state → action → reducer → store. I’ve used Redux Toolkit for managing global state and handled async logic using middleware like Redux Thunk.",
  "styledComponent": "I understand the strengths of styled-components from a Component-Based Design perspective, using it to abstract and reuse styles at the component level. I’ve chosen styled-components in cases requiring a declarative and structured styling approach, as opposed to utility-first tools like Tailwind CSS. I’m also aware of the readability issues in JSX with certain declaration styles and the recent official maintenance discontinuation, and I’m exploring alternatives and migration strategies.",
  "tailwind": "Experienced in using Tailwind CSS, including customizing settings via tailwind.config.ts and managing global styles. I’m aware of Tailwind’s style overrides and have rebuilt base UI elements (like h1, button) into reusable components. I actively use Tailwind to implement scalable design systems in production.",
  "reactQuery": "I understand React Query’s caching mechanism and query lifecycle. I can manage data identification using queryKey, distinguish between mutation and fetchQuery usage based on context, and use invalidateQueries to refresh data after mutations. I structure UI based on loading, error, and success states to manage server state in an organized way.",
  "git": "Proficient in using Git CLI for branching, committing, and merging. I clearly understand the difference between Git and GitHub. I manage commit history with rebase options like squash, reword, and drop, and can resolve complex merge conflicts by identifying issues at the commit level. I also understand the concept of base commits and use rebase strategically to maintain clean team history.",
  "github": "I manage issues and track task progress using GitHub Projects. I’ve also worked with tools like Fork and Sourcetree. I'm experienced in code reviews and pull request processes, and understand the collaborative workflows within the GitHub ecosystem for smooth team coordination.",
  "githubActions": "I’ve built CI/CD pipelines using GitHub Actions and written YAML files to automate build and deployment processes. I’ve resolved errors by analyzing logs and continue to optimize workflows through ongoing learning and refinement.",
  "vercel": "Linked GitHub repositories to Vercel for automated deployment, and configured custom domains and redirect rules. I’ve used Preview URLs to test pre-release versions and actively used environment variables and CI/CD integrations in real-world projects.",
  "figma": "Skilled in collaborating with designers to understand and implement component-based design systems. I analyze responsive designs and translate them into code. I’ve suggested improvements after identifying UX inconsistencies in Figma flows, and I use plugins and prototypes to maintain clear communication with designers.",
  "notion": "Experienced in using Notion for documenting daily scrums, meeting notes, and Git commit/review conventions. I’ve built database-driven project pages and split structures for better readability. I even manage my personal schedule with Notion due to my high level of familiarity with the tool.",
  "jira": "I’ve used Jira’s Kanban boards in ticket-based QA processes, managing client feedback and updates efficiently. I clearly understand the distinctions between Epics, Tasks, and Sub-tasks, and can prioritize issues while customizing workflows.",
  "slack": "Fluent in using Slack as a primary team communication tool, including mentions, thread-based conversations, file sharing, and notifications. I’ve also used Slack bots (e.g., Daily GeekNews, CI/CD alerts) to reduce repetitive tasks and foster efficient communication in a real-world setting."
}
